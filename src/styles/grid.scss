// Default Variables
$column_name		: col !default;
$column_before 		: before !default;
$column_after 		: after !default;
$max_width 			: 1440; // Unit in pixels
$column_count 		: 12;
$column_gutter 		: 0; // Unit in pixels
$column_width 		: ($max-width / $column_count) - ($column_gutter * 2); // Unit in percentages

@function decimal-round($number, $digits: 0, $mode: round) {
	$n: 1;
	// $number must be a number
	@if type-of($number) !=number {
		@warn '#{ $number } is not a number.';
		@return $number;
	}
	// $digits must be a unitless number
	@if type-of($digits) !=number {
		@warn '#{ $digits } is not a number.';
		@return $number;
	}
	@else if not unitless($digits) {
		@warn '#{ $digits } has a unit.';
		@return $number;
	}
	@for $i from 1 through $digits {
		$n: $n * 10;
	}
	@if $mode==round {
		@return round($number * $n) / $n;
	}
	@else if $mode==ceil {
		@return ceil($number * $n) / $n;
	}
	@else if $mode==floor {
		@return floor($number * $n) / $n;
	}
	@else {
		@warn '#{ $mode } is undefined keyword.';
		@return $number;
	}
}

// decimal-ceil(0.666, 2) => 0.67
@function decimal-ceil($number, $digits: 0) {
    @return decimal-round($number, $digits, ceil);
}

// decimal-floor(0.666, 2) => 0.66

@function decimal-floor($number, $digits: 0) {
    @return decimal-round($number, $digits, floor);
}

// Column Wrapper
.wrap {
	max-width 	: $max_width + px;
	margin 		: auto;
	padding 	: 0 $column_gutter + px;
	position 	: relative;

	.wrap {
		width 	: 100%;
		padding : 0;
	}

	&.wide { max-width: 1500px; }

	// Main Columns
	div[class^="col-"] {

		float 		: left;
		box-sizing 	:  content-box;
		display 	: inline-block;
		margin 		: 0 decimal-floor($column_gutter / $max-width * 100%, 3);

		.alpha { margin-left 	: 0 !important; }
		.omega { margin-right 	: 0 !important; }
	}
}

// Main Column Widths && Before & After
@for $index from 1 through $column_count {

	// Variables getting values
	$each_gutter	: ($index - 1 ) * $column_gutter * 2;
	$each_col		: ($column_width * $index) + $each_gutter;

	// .col-* Declarations
	.#{$column_name}-#{$index} {

		width: decimal-floor($each_col / $max-width * 100%, 3);

	}

	// .before-* Declarations
	.#{$column_before}-#{$index} {
		padding-left: decimal-floor((($column_width * $index) + ($index) * ($column_gutter * 2)) / $max-width * 100%, 3);
	}

	// .after-* Declarations
	.#{$column_after}-#{$index} {
		padding-right: decimal-floor((($column_width * $index) + ($index) * ($column_gutter * 2)) / $max-width * 100%, 3);
	}

}

// NESTED COLUMNS
@for $i from 1 through $column_count {
	.#{$column_name}-#{$i} .wrap {
		$each_gutter_out	: ($i - 1 ) * $column_gutter * 2;
		$each_col_out		: ($column_width * $i) + $each_gutter_out;
		$j					: $i;
		@while $j > 0 {
			.#{$column_name}-#{$j} {
				$each_gutter	: ($j - 1 ) * $column_gutter * 2;
				$each_col		: ($column_width * $j) + $each_gutter;
				width: decimal-floor(($each_col / $each_col_out) * 100%, 3);
				// Don't add margins if width is at 100%
				@if $i > $j {
					margin: 0 decimal-floor(($column_gutter / $each_col_out) * 100%, 3);
				}
			}
			$j: $j - 1;
		}
	}
}

// NESTED BEFORE
@for $i from 1 through $column_count {
	.#{$column_name}-#{$i} .wrap {
		$each_gutter_out	: ($i - 1 ) * $column_gutter * 2;
		$each_col_out		: ($column_width * $i) + $each_gutter_out;
		$j					: $i;
		@while $j > 0 {
			.#{$column_before}-#{$j} {
				$each_gutter	: ($j - 1 ) * $column_gutter * 2;
				$each_col		: ($column_width * $j) + $each_gutter;
				@if $i > $j {
					$total_gutter: ($column_gutter * 2) * $j;
					$total_cols: $column_width * $j;
					padding-left: decimal-floor(($total_gutter + $total_cols) / $each_col_out * 100%, 3);
				}
			}
			$j: $j - 1;
		}
	}
}

// NESTED AFTER
@for $i from 1 through $column_count {
	.#{$column_name}-#{$i} .wrap {
		$each_gutter_out	: ($i - 1 ) * $column_gutter * 2;
		$each_col_out		: ($column_width * $i) + $each_gutter_out;
		$j					: $i;
		@while $j > 0 {
			.#{$column_after}-#{$j} {
				$each_gutter	: ($j - 1 ) * $column_gutter * 2;
				$each_col		: ($column_width * $j) + $each_gutter;
				@if $i > $j {
					$total_gutter: ($column_gutter * 2) * $j;
					$total_cols: $column_width * $j;
					padding-right: decimal-floor(($total_gutter + $total_cols) / $each_col_out * 100%, 3);
				}
			}
			$j: $j - 1;
		}
	}
}

.clear {
	clear:both;
	&:before,
	&:after {
		content: '';
		display:table;
		clear: both;
	}
	&:after { clear: both; }
}